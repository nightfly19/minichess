(in-package :elo100)
(ql:quickload :lisp-unit)

(defmacro do-in-move (move &body forms)
  `(progn
     (apply-move *state* ,move)
     (progn ,@forms)))

(define-test new-state-test
  (assert-equalp (new-state) (new-state)))

(define-test apply-move
  (setf *state* (new-state))
  (setf *state-history* nil)
  (apply-move *state* '((1 . 1) 3 . 3))
  (assert-equalp #("kqbnr" "p.ppp" "....." "...p." "PPPPP" "RNBQK")
                 (getf *state* :board))
  (setf *state* (new-state))
  (setf *state-history* nil)
  (apply-move *state* '((2 . 1) 4 . 2))
  (assert-equalp #("kqbnr" "pp.pp" "....p" "....." "PPPPP" "RNBQK")
                 (getf *state* :board))
  (setf *state* (new-state))
  (setf *state-history* nil)
  (apply-move *state* '((4 . 5) 1 . 1))
  (assert-equalp #("kqbnr" "pKppp" "....." "....." "PPPPP" "RNBQ.")
                 (getf *state* :board)))

(define-test pawn-test
  (setf *state* (new-state))
  (setf *state-history* nil)
  (apply-move *state* '((1 . 1) 3 . 2))
  (assert-equalp '(((3 . 2) 3 . 3))
                 (move-list (getf *state* :board) '(3 . 2) nil))
  (setf *state* (new-state))
  (setf *state-history* nil)
  (apply-move *state* '((1 . 1) 3 . 3))
  (assert-equalp '(((3 . 3) 2 . 4) ((3 . 3) 4 . 4))
                 (move-list (getf *state* :board) '(3 . 3) nil)))

(define-test negamax-test
  (setf *state* (new-state))
  (setf *state-history* nil)
  (assert-equalp (negamax *state* #'score nil 1)
                 (negamax *state* #'score T 1))
  (setf *state* (new-state))
  (setf *state-history* nil)
  (assert-equalp (negamax *state* #'score nil 2)
                 (negamax *state* #'score T 2))
  (setf *state* (new-state))
  (setf *state-history* nil)
  (assert-equalp (negamax *state* #'score nil 3)
                 (negamax *state* #'score T 3))
  (setf *state* (new-state))
  (setf *state-history* nil)
  (assert-equalp (negamax *state* #'score nil 4)
                 (negamax *state* #'score T 4)))

(defun move-list-contains (move-list move)
  (reduce (lambda (success pos-move)
            (or success
                (equalp move pos-move))) move-list :initial-value nil))

(define-test fucking-test)

(defun run-unit-tests ()
  (let ((results (lisp-unit:run-tests :all :elo100)))
    (sb-ext:quit :unix-status (+ (length (error-tests results))
                                 (length (failed-tests results))))))

;;   (setf *state* (new-state))
;;   (setf *state-history* nil)
;;   (apply-move *state* '((1 . 1) 3 . 3))
;;   (print-state *state*)
;;   (print (getf *state* :on-move))
;;   (print (possible-moves *state*))
;;   (assert-true (move-list-contains (possible-moves *state*) '((1 . 0) 1 . 4)))
;;   (assert-true (move-list-contains (possible-moves *state*) '((3 . 3) 4 . 4)))
;;   (assert-true (move-list-contains (possible-moves *state*) '((3 . 3) 2 . 4)))
;;   (dolist (pos-move (possible-moves *state*))
;;     (print pos-move)
;;     ;;(apply-move *state* pos-move)
;;     (format T "~%")
;;     (print-state *state*)
;;     (print (score *state*))
;;     (undo-move *state*)))
;; (setf *state* (new-state))
;; (setf *state-history* nil)
;; (assert-equalp (negamax *state* #'score nil 5)
;;                 (negamax *state* #'score T 5)))
