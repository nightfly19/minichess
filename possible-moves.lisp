(in-package :elo100)

(defun move-scan (moves board color coord coord-d capture require-capture max-manhat)
  (let ((keep-searching T)
        (moves moves)
        (o-x (x coord))
        (o-y (y coord))
        (cur-x (x coord))
        (cur-y (y coord))
        (d-x (x coord-d))
        (d-y (y coord-d)))
    (declare (type fixnum cur-x d-x cur-y d-y o-x o-y max-manhat))
    (setf cur-x (+ cur-x d-x))
    (setf cur-y (+ cur-y d-y))
    (loop while (and keep-searching
                     (d-in-bounds-p cur-x cur-y)
                     (<= (d-manhat o-x o-y cur-x cur-y) max-manhat)) do
         (let ((piece (d-piece-at board cur-x cur-y)))
           (if piece
               (progn
                 (cond
                   ((not capture)
                    (setf keep-searching nil))
                   ((eql color (piece-color piece))
                    (setf keep-searching nil))
                   (T (setf keep-searching nil)
                      (setf moves (cons (cons coord (cons cur-x cur-y)) moves)))))
               (when (not require-capture)
                 (setf moves (cons (cons coord (cons cur-x cur-y)) moves)))))
         (setf cur-x (+ cur-x d-x))
         (setf cur-y (+ cur-y d-y)))
    moves))

(defun mover (action directions moves)
  (reduce action directions :initial-value moves))

(defgeneric inner-move-list (board color coord moves piece-class))
(defmethod inner-move-list (board color coord moves piece-class) moves)

(defmethod inner-move-list (board color coord moves (piece-class (eql #\N)))
  (mover (lambda (moves direction)
           (move-scan moves board color coord direction T nil 3))
         '((-1 . 2) (1 . 2)   (2 . 1)   (2 . -1)
           (1 . -2) (-1 . -2) (-2 . -1) (-2 . 1)) moves))

(defmethod inner-move-list (board color coord moves (piece-class (eql #\R)))
  (mover (lambda (moves direction)
           (move-scan moves board color coord direction T nil 99))
         '((1 . 0) (-1 . 0) (0 . 1) (0 . -1)) moves))

(defmethod inner-move-list (board color coord moves (piece-class (eql #\Q)))
  (mover (lambda (moves direction)
           (move-scan moves board color coord direction T nil 99))
         '((-1 . 1) (0 . 1) (1 . 1)
           (-1 . 0)         (1 . 0)
           (-1 . -1)(0 . -1)(1 . -1)) moves))

(defmethod inner-move-list (board color coord moves (piece-class (eql #\K)))
  (let ((moves moves))
    (setf moves (mover (lambda (moves direction)
                         (move-scan moves board color coord direction T nil 1))
                       '((1 . 0) (-1 . 0) (0 . 1) (0 . -1)) moves))
    (setf moves (mover (lambda (moves direction)
                         (move-scan moves board color coord direction T nil 2))
                       '((-1 . -1) (1 . -1) (-1 . 1) (1 . 1)) moves))
    moves))

(defmethod inner-move-list (board color coord moves (piece-class (eql #\B)))
  (let ((moves moves))
    (setf moves (mover (lambda (moves direction)
                         (move-scan moves board color coord direction T nil 99))
                       '((-1 . -1) (1 . -1) (-1 . 1) (1 . 1)) moves))
    (setf moves (mover (lambda (moves direction)
                         (move-scan moves board color coord direction nil nil 1))
                       '((1 . 0) (-1 . 0) (0 . 1) (0 . -1)) moves))
    moves))

(defmethod inner-move-list (board color coord moves (piece-class (eql #\P)))
  (let ((color (color-at board coord)))
    (mover (lambda (moves direction)
             (move-scan moves board color coord direction nil nil 1))
           (if (eql color :white) '((0 . -1)) '((0 . 1)))
           (mover (lambda (moves direction)
                    (move-scan moves board color coord direction T T 2))
                  (if (eql color :white)
                      '((1 . -1) (-1 . -1))
                      '((1 . 1) (-1 . 1))) moves))))

(defun move-list (board coord moves)
  (inner-move-list board (color-at board coord) coord moves (piece-class (piece-at board coord))))

(defun possible-moves ()
  (let ((board (game-state-board *game-state*))
        (color (game-state-on-move *game-state*))
        (moves ()))
    (declare (type (simple-vector 6) board))
    (loop for y from 0 to 5 do
         (let ((row (aref board y)))
           (loop for x from 0 to 4 do
                (let* ((piece (char row x))
                       (spot-color (piece-color piece)))
                  (when (eql color spot-color)
                    (setf moves (move-list board (cons x y) moves)))))))
    moves))
